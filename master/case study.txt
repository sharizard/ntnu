Case Study candidates
- Nordic Semiconductor
- Telenor Trondheim
- Statoil
- Autronica
- Matiq (SKADA systemer - Life Cycle Management IIT)

Case Study Design
- Detect technical debt using static tools such as code smells and automated static analysis on code along with interviews. 
- Use models and metrics from existing papaers
- Modularity violations or design patterns and grime buildup
- AntiPatterns, rot (when design pattern is not suitable for changes)
- Look for symptoms on higher level abstraction of architecture (compoentns, connectors, concerns)

How to
- Prestudy/review the architecture
- Identify violations, debt etc.
- Conduct interviews, questionnaires about findings

Identify TD:
- Code smells to discover breaches in object-oriented design practices
- Use of tools

Keywords for state-of-the-art
- Software architecture design
- Architectural decay
- Identifying Technical Debt
- Identifying/Investigate Architectural Technical Debt
- Identifying Design Debt
- Architectural Bad Smells
- Code Smells
- Architectural Erosion
- Architectural Drift
- Architecture Anti-patterns
- Design patterns
- Dependencies between components
- Software quality
- Software reuse
- Case study design
- Component Software
- Object-oriented design
- Component design
- Architecture degradation
- Refactoring
- TD management process



-----------------------------------------------
CASE STUDY OPEN SOURCE
-----------------------------------------------

Tools that can be used:
- SonarQube (supports multiple languages such as Java, JS, Python, C/C++, C#). They have a code smells plugin
- CLIO (modularity violations)
- Code smells (Codevizard)
- Automatic Static Analysis (FindBugs)
- Design patterns and grime buildup
- Structure101?
- Anti Patterns
- Design Pattern Disharmonies
- Understand
- Titan toolset
- Lattix
- Design Pattern Finder
- Create UML diagrams for pattern realizations, verify the UML diagrams manually.
- UMLGraph: http://www.umlgraph.org/index.html
- Dependency analyzer: Class Dependency Analyzer (CDA V1.16.0)

High-level models extracted from documentation.
SweetHome3D had design terts in the JDepend tool.
Ant had a modue view based on the packages in the Lattix LDM tool.
Lucene had a layered view diagram, mappong performed outselves, using package names
ArgoUML had a set of module views and the packages that made up each module.

Codecrawler to map dependencies?
http://codecrawler.sourceforge.net/docs.htm
http://hannesdorfmann.com/annotation-processing/annotationprocessing101


https://wiki.eecs.yorku.ca/project/dpd/finder

https://github.com/UnisannioSoftEng/DPF/wiki/Design-Pattern-Finder-Home

http://www.ptidej.net/





Open Source Projects
- HomeGenie (C#) - Home Automation Server in a "internet of things" world
- FreeRTOS Real Time Kernel (RTOS) (C)
- MGSys (Java)
- freedomotic (Java)
- SmartSlog (JAva?)
- StateOS (C)
- QM Modeling Tool (C, C++)
- JHotDraw